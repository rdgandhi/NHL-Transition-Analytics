"""
dashboard.py  –  Streamlit front-end for the Transition-Efficiency demo
======================================================================
Shows a shot-location map + distribution of **predicted xGD-shift**
for any of the seven Canadian NHL clubs.
"""
from __future__ import annotations

import pathlib
import sys  # <-- added

import joblib
import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st

ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))

from src.features import build_feature_frame

# ------------------------------------------------------------------ #
# 0.  Paths
# ------------------------------------------------------------------ #
DATA_CSV = pathlib.Path("data/raw/shots_20232024.csv")
MODEL_PKL = pathlib.Path("models/best_model.pkl")


# ------------------------------------------------------------------ #
# 1.  Cache helpers
# ------------------------------------------------------------------ #
@st.cache_data(show_spinner="Loading raw shots …")
def load_raw() -> pd.DataFrame:
    return pd.read_csv(DATA_CSV, low_memory=False)


@st.cache_resource(show_spinner="Loading xGD model …")
def load_model():
    return joblib.load(MODEL_PKL)


# ------------------------------------------------------------------ #
# 2.  Simple coordinate alias (matches features._alias_coords)
# ------------------------------------------------------------------ #
def alias_xy(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    if {"arenaAdjustedXCord", "arenaAdjustedYCord"}.issubset(df.columns):
        df["x"] = df["arenaAdjustedXCord"]
        df["y"] = df["arenaAdjustedYCord"]
    else:
        df["x"] = df["xCordAdjusted"]
        df["y"] = df["yCordAdjusted"]
    return df


# ------------------------------------------------------------------ #
# 3.  UI
# ------------------------------------------------------------------ #
st.set_page_config(page_title="NHL Transition Dashboard", layout="wide")
#st.title("Transition-Efficiency • Canadian NHL Teams (2024-25)")
st.title("Transition-Efficiency • Canadian NHL Teams (2023-24)")

raw = load_raw()
raw = raw.assign(
    shootingTeam=lambda df: np.where(
        df["team"] == "HOME", df["homeTeamCode"], df["roadTeamCode"]
    )
)
model = load_model()

# Team selector based on three-letter codes present in both home/away cols
team_codes = sorted(
    pd.concat([raw["homeTeamCode"], raw["roadTeamCode"]])
    .dropna()
    .unique()
    .tolist()
)

team = st.selectbox("Choose team", team_codes, index=team_codes.index("TOR") if "TOR" in team_codes else 0)

# ------------------------------------------------------------------ #
# 4.  Sub-setting shots where the *shooting* team == selected team
# ------------------------------------------------------------------ #
subset = raw[raw["shootingTeam"] == team].pipe(alias_xy)

col1, col2 = st.columns([1.3, 1.0])

# ------------------------------------------------------------------ #
# 4.a Shot-chart
# ------------------------------------------------------------------ #
with col1:
    st.subheader("Shot map (all situations)")
    fig = px.scatter(
        subset,
        x="x",
        y="y",
        opacity=0.65,
        width=800,
        height=350,
        labels={"x": "", "y": ""},
    )
    # symmetrical rink bounds
    fig.update_layout(
        yaxis_scaleanchor="x",
        xaxis_range=[-100, 100],
        yaxis_range=[-42.5, 42.5],
        template="simple_white",
        showlegend=False,
    )
    st.plotly_chart(fig, use_container_width=True)

# ------------------------------------------------------------------ #
# 4.b  Predicted xGD-shift histogram
# ------------------------------------------------------------------ #
with col2:
    st.subheader("Predicted ΔxG (25-sec) distribution")
    # Build features + run model
    feats = build_feature_frame(subset)

    # use arenaAdjustedShotDistance if shotDistance isn’t present
    distance_col = "shotDistance" if "shotDistance" in feats.columns else "arenaAdjustedShotDistance"

    cols_used = [
        "entry_type",
        "manpower_situation",
        "offensive_zone",
        distance_col,
        "shotAngleAdjusted",
        "period",
        "time",
    ]
    preds = model.predict(feats[cols_used])

    st.plotly_chart(
        px.histogram(preds, nbins=50, labels={"value": "Predicted xGD-shift"}),
        use_container_width=True,
    )
    st.metric("Average predicted ΔxG", f"{preds.mean():.3f}")

st.caption(
    "Shot coordinates use arena-adjusted positions. "
    "xGD-shift predictions generated by the best CV model "
    "trained on 2023-24 MoneyPuck data."
)
